Цикл жизни
==========
Рассмотрим этапы, через которые проходит запрос клиента перед тем, как получить ответ

Определение метода контроллера
------------------------------

Первоначально **Cheapy** хочет получить обработчик запроса. Для этого берутся все объявленные методы с аттрибутом
:code:`#[Route]`. После того, как :code:`URI` и метод запроса совпадают с указанными - цикл поиска завершается и
**Cheapy** переходит к следующему этапу. В ином случае - ответ содержит ошибку с шорткодом :code:`R1`.

Аутентификация запроса
----------------------

Этот этап выполняется только при наличии аттрибута :code:`#[Authenticate]` в полученном методе контроллера.

Здесь подразумевается автоматическая аутентификация запроса через :code:`Access-Token` и :code:`Refresh-Token`,
закодированные в формате JWT и предоставленные в :code:`Cookie` с флагом :code:`HttpOnly`. Оба токена содержат в
:code:`header` помимо базовой информации свойства :code:`time` (unix-метка времени, по достижении которой токен станет
невалидным) и :code:`ip` (IP адрес пользователя).

Если оба или один из токенов не был предоставлен - ответ придет с кодом :code:`400` и шорткодом :code:`A1`

Если невалиден только :code:`Access-Token` - то он автоматически будет заменен.

Если невалидны оба токена - то ответ придет с кодом :code:`400` и шорткодом :code:`A2`

Попытка ответить кэшем
----------------------

Этот этап выполняется только при наличии атрибута :code:`#[Cache]` в полученном методе контроллера.

В этом этапе **Cheapy** попробует найти закешированный ответ в :code:`Redis`, привязанный к предоставленному :code:`URI`.
Если такой ответ существует - он будет отправлен клиенту, а цикл жизни приложения завершен. В ином случае - никакие
действия совершены не будут, а выполнение продолжится дальше.

Получение моделей
-----------------

На этом этапе **Cheapy** получает привязанные к методу контроллера модели запроса и ответа. Напомню, что модель запроса
актуальна только для методов :code:`POST`, :code:`UPDATE` и :code:`DELETE`. А модель ответа только для метода :code:`GET`.

Получение URI параметров
------------------------

Если в параметре :code:`uri` аттрибута :code:`#[Route]` объявлены параметры, то они попадут в свойство контроллера
:code:`params`. Вот пример:

.. code-block:: PHP

    <?php

    // some controller file

    #[Route(uri: '/deals/{id}')]
    public function getDealById(): void
    {
        $id = $this->params->id;

        // some code
    }

Получение тела токена
---------------------

Выполняется только при наличии аттрибута :code:`#[Authenticate]`.

По спецификации формата :code:`JWT` токен содержит :code:`header`, :code:`payload` и :code:`signature`. В текущей версии
**Cheapy** в блоке :code:`payload` содержится только :code:`id` пользователя из базы данных.

Соответственно свойства :code:`payload` попадают в объект, доступный через свойство контроллера :code:`token`. Вот пример:

.. code-block:: PHP

    <?php

    // some controller file

    // some attributes
    #[Authenticate]
    public function getDealById(): void
    {
        $id = $this->token->id;

        // some code
    }

Заполнение модели запроса
-------------------------

Выполняется только при наличии аттрибута :code:`#[Request]`.

Если модель заполнена правильно, то все данные с тела запроса попадут в свойство контроллера :code:`request`.
Иначе - ошибка :code:`JsonError` с кодом :code:`400` и шорткодом :code:`R2`. Вот пример:

.. code-block:: PHP

    <?php

    // some controller file

    // some attributes
    public function getDealById(): void
    {
        $id = $this->request->id;

        // some code
    }

Выполнение метода
-----------------

Вот здесь и происходит выполнение метода контроллера, если все предыдущие этапы были завершены корректно. Необходимую
ответную нагрузку необходимо передать в свойство контроллера :code:`response` согласно модели ответа. Вот пример:

.. code-block:: PHP

    <?php

    // some controller file

    // some attributes
    public function getDealById(): void
    {
        // some code

        $this->response->deal = $some_variable;
    }

Валидация модели ответа
-----------------------

Выполняется только при наличии атрибута :code:`#[Response]`.

Клиент на финишном пути. Остались только подготовительные к ответу методы. Сейчас будет происходить валидация
предоставленных к ответу данных. Если модель ответа заполнена корректно - то перейдем к следующему этапу. Иначе - ошибка
:code:`JsonError` с кодом :code:`400` и шорткодом :code:`R3`

Подготовка к ответу
-------------------

На этом этапе **Cheapy** уже полностью готов отдать клиенту ответ, остается только последний метод, который не является
обязательным.

Кеширование ответа
------------------

Наличие атрибута :code:`#[Cache]` обязательно для выполнения этого этапа.

Вот он - последний этап. Кеширование ответа необходимо для того, чтобы другие клиенты с идентичным запросом не дожидались
выполнения всего цикла, а получали уже готовый ответ.

Вот и все
---------

Если вы хотите разобраться с каждым этапом или обработчиком подробнее - ознакомьтесь со страницами, посвященными каждому
из них.