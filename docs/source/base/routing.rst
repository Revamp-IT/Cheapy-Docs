Роутинг
=======

Давайте разберем роутинг, который поддерживает **Cheapy** в текущей версии

Объявление
----------

Привязать новый роут к методу контроллера очень просто - необходим атрибут :code:`#[Route]` с двумя обязательными
аргументами - :code:`uri` (шаблон :code:`URI`) и :code:`methods` (поддерживаемые HTTP методы). Вот пример:

.. code-block:: PHP

    <?php

    // some controller file

    #[Route(uri: '/deals', methods: ['GET', 'POST'])]
    public function getDeals(): void
    {
        // some code
    }

Параметризация
--------------

Вы можете использовать параметры в построении эндпоинта API. Параметры нужны для того, чтобы **Cheapy** знал с каким
именно элементом одной группы ему придется работать. Все параметры попадают в свойство контроллера :code:`params`. Вот
пример работы с параметризацией:

.. code-block:: PHP

    <?php

    // some controller file

    #[Route(uri: '/{name}/{lastname}/{company}')]
    // some attributes
    public function someFunction(): void
    {
        $name = $this->params->name;
        $lastname = $this->params->lastname;
        $company = $this->params->company;
    }

REST шаблоны
------------

**Cheapy** руководствуется концепцией REST API при построении роутов. Таким образом существуют два основных раздела
роутинга - :code:`Collection` (коллекции сущностей) и :code:`Singleton` (сущность).

Коллекции отражены всегда множественным числом, указание сущности же передается в единственном числе, либо параметром.

Рассмотрим такую ситуацию: вы проектируете API для интернет-магазина. Перед вами стоит задача создать такие эндпоинты:

#. Получение списка всех пользователей
#. Получение списка товаров по ID категории
#. Получение информации о конкретном пользователе
#. Получение информации о конкретном товаре

В таком случае, шаблоны :code:`URI` должны быть такими:

#. :code:`/users/`
#. :code:`/categories/{id}/products/`
#. :code:`/users/{id}/`
#. :code:`/products/{id}/`
